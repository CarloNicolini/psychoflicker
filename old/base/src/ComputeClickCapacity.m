function [CapacityVsNumTargets, AsymptoteEstimate] = ComputeClickCapacity(numItems, numTargets, percentCorrect, show, simulate)%% function [CapacityVsNumTargets, AsymptoteEstimate] = ComputeClickCapacity(numItems, numTargets, percentCorrect, show, simulate)% George Alvarez: alvarez@mit.edu% Version: 1.0% Last Modified: 10.17.2005 % Demo: [CapacityVsNumTargets, AsymptoteEstimate] = ComputeClickCapacity(10, [1 2 3 4], [100 100 88 74], 1, 0)% ********** Input Variables% numItems: total number of items on the screen% numTargets: an array with the number of targets items% percentCorrect: percent correct for each number of targets% show: whether or not to plot the results% simulate: whether or not to run monte carlo simulations% **********  % ********** Return Values% CapacityVsNumTargets: capacity as a function of the number of targets% Asymptote: the asymptotic capacity estimate% ********** % ********** Purpose (what this function does)% This function computes a capacity estimate from accuracy in the tracking% task when subjects have to click on all of the target items.% ********** % ********** Logic of Capacity Calculation% Say a subject is asked to track 5 of 10 items, but the subject's capacity% is only 3 objects. We can assume that the subject will click on the 3% tracked targets, but will then guess for the remaining 2 targets out of 7% items (2 targets + 5 distractors). Overall, the number of targets selected% will be: 3 + (5-3)*(5-3)/(10-3) = 3.5714. So the average propotion% correct will be 3.5714/5*100%% In general [C/n + (n-c)*(n-C)/(m-C)]/n = proportion correct (P)% where C = capacity, n = number of targets, m = number of items total  % % solve for C% % ********** % ********** Outline% This function is broken down into 2 main steps% 1. initialize some variables% 2. compute capacity% 3. plot the results% 4. run monte carlso simulation% ********** % 1. Initialize Some Variables ********************************************% we want to work with proportions (0-1)if (max(percentCorrect)>1)    percentCorrect=percentCorrect./100;end% *************************************************************************% 2. Compute Capacity Estimate ********************************************% compute capacityCapacityVsNumTargets=(percentCorrect.*numTargets*numItems-numTargets.^2)./(numItems-2.*numTargets+percentCorrect.*numTargets);CapacityVsNumTargets(find(CapacityVsNumTargets < 0))=0;% estimate the asymptote of this functiontempCapacity=CapacityVsNumTargets;tempNumTargets=numTargets;AsymptoteEstimate=mean(tempCapacity);while (AsymptoteEstimate >= tempNumTargets(1) & length(tempNumTargets)>1)    tempCapacity(1)=[];    tempNumTargets(1)=[];    AsymptoteEstimate=mean(tempCapacity);end% *************************************************************************% 3. Plot the Results ***************************************************** if (show)    repAsymptoteEstimate=repmat(AsymptoteEstimate,1,length(numTargets));    figure(1);    plot(numTargets,CapacityVsNumTargets,'ko-', numTargets, repAsymptoteEstimate, 'r--');    axis([0 numTargets(end)+1 0 numTargets(end)+1]);    axis('equal');    ylabel('Capacity (objects)');    xlabel('Number of Targets');    text((numTargets(end)-numTargets(1))/2,AsymptoteEstimate+.5,['Asymptote Estimate = ' num2str(AsymptoteEstimate)]);end% *************************************************************************% 4. Run Monte Carlso Simulations  ****************************************if (simulate)    for i=1:10000          % simulate 10000 trials        simItems    =10;    % sim numitems        simTargets  =4;     % sim numtargets        simTracked  =2;     % sim num tracked        isTarget(1:simItems)=0;        % which are targets (none at first)        isTarget(1:simTargets)=1;      % make first ones targets up to numTargets        isSelected(1:simItems)=0;      % which are selected by subject (none at first)        isSelected(1:simTracked)=1;    % make first ones selected up to numTracked        randItems=randperm(simItems-simTracked)+simTracked;    % randomize unselected items        isSelected(randItems(1:simTargets-simTracked))=1;      % choose the next N unselected items where N is equal to simTargets-simTracked        numCorrect(i)=sum(isSelected(1:simTargets));    end    monteMeanNumCorrect=mean(numCorrect)    montePercentCorrect=mean(numCorrect)/numTargets*100end