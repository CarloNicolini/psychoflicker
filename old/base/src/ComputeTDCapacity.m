function [CapacityVsNumTargets, AsymptoteEstimate] = ComputeTDCapacity(numItems, numTargets, hitRate, faRate, show, simulate)%% function [CapacityVsNumTargets, AsymptoteEstimate] = ComputeTDCapacity(numItems, numTargets, hitRate, faRate, show, simulate)% George Alvarez: alvarez@mit.edu% Version: 1.0% Last Modified: 10.21.2005 % Demo: [CapacityVsNumTargets, AsymptoteEstimate] = ComputeTDCapacity(10, [1 2 3 4], [100 100 85 70], [4 8 10 12], 1, 0)% ********** Input Variables% numItems: total number of items on the screen% numTargets: an array with the number of targets items% hitRate: hit rate corresponds to proportion correctly reported "target" trials% faRate: false alarm rate corresponds to incorrectly reported "target" trials% show: whether or not to plot the results% simulare: wheter or not to run monte carlo simulations% **********  % ********** Return Values% CapacityVsNumTargets: capacity as a function of the number of targets% Asymptote: the asymptotic capacity estimate% ********** % ********** Purpose (what this function does)% This function computes a capacity estimate from accuracy in the tracking% task when subjects have to indicate whether a single highlighted item is% a target or a distractor. % ********** % ********** Logic of Capacity Calculation% % The equation is%% C = N*(H-FA)/(1-FA) (1)%% Where C = capacity, N=number of target items, H = hit rate, FA = false% alarm rate.%% The logic is that the hit rate (correctly reporting "target") depends on% the number of items tracked.%% H = C/N * 1 + (N-C)/N * g (2)%% So C/N percent of the time a target is highlighted it is one of the ones% the subject was tracking, so the subject responds correctly. However, the% subject will also guess correctly when an "untracked" target is% highlighted on (N-C)/N percent of the trials. We can estimate the% guessing rate from the false alarm rate (the probability of responding% "target" to a distractor item). This equation can be solved for C, which% gives equation (1).%% ********** % ********** Outline% This function is broken down into 2 main steps% 1. initialize some variables% 2. compute capacity% 3. plot results% 4. run monte carlo simulations% ********** % 1. Initialize Some Variables ********************************************% we want to work with proportions (0-1)if (max(hitRate)>1)    hitRate=hitRate./100;endif (max(faRate)>1)    faRate=faRate./100;end% *************************************************************************% 2. Compute Capacity Estimate ********************************************% compute capacityCapacityVsNumTargets=numTargets.*(hitRate-faRate)./(1-faRate);CapacityVsNumTargets(find(CapacityVsNumTargets < 0))=0;% estimate the asymptote of this functiontempCapacity=CapacityVsNumTargets;tempNumTargets=numTargets;AsymptoteEstimate=mean(tempCapacity);while (AsymptoteEstimate >= tempNumTargets(1) & length(tempNumTargets)>1)    tempCapacity(1)=[];    tempNumTargets(1)=[];    AsymptoteEstimate=mean(tempCapacity);end% *************************************************************************% 3. Plot the Results ***************************************************** if (show)    repAsymptoteEstimate=repmat(AsymptoteEstimate,1,length(numTargets));    figure(1);    plot(numTargets,CapacityVsNumTargets,'ko-', numTargets, repAsymptoteEstimate, 'r--');    axis([0 numTargets(end)+1 0 numTargets(end)+1]);    axis('equal');    ylabel('Capacity (objects)');    xlabel('Number of Targets');    text((numTargets(end)-numTargets(1))/2,AsymptoteEstimate+.5,['Asymptote Estimate = ' num2str(AsymptoteEstimate)]);end% *************************************************************************% 4. Run Monte Carlso Simulations  ****************************************if (simulate)    targCount=0;    distCount=0;        for i=1:10000                               % simulate 10000 trials        simItems    =10;                        % sim numitems        simTargets  =4;                         % sim numtargets        simTracked  =3;                         % sim num tracked        guessTarget = 50;                       % rate subject guesses traget        guessDistractor = (100-guessTarget);    % rate subject guesses distractor                isTarget(1:simItems)=0;                 % which are targets (none at first)        isTarget(1:simTargets)=1;               % make first ones targets up to numTargets                isTracked(1:simItems)=0;                % which are tracked (none at first)        isTracked(1:simTracked)=1;              % make first ones tracked up to simTracked                randomItem=randperm(simItems);          % randomly select an item        randomItem=randomItem(1,1);                     guessValue=randperm(100);               % random value if subject guesses        guessValue=guessValue(1,1);                if (isTarget(randomItem)==1)            % selected item is a target            targCount=targCount+1;            if (isTracked(randomItem)==1)                simHitRate(targCount)=1;        % if the target is tracked, subject responds correct            else                if (guessValue <= guessTarget)  % if not, the subject will guess                    simHitRate(targCount)=1;    % guess correctly                else                    simHitRate(targCount)=0;    % guess incorrectly                end            end        else            distCount=distCount+1;            if (guessValue <= guessTarget)      % the subject will guess                    simFARate(distCount)=1;     % guess incorrectly            else                    simFARate(distCount)=0;     % guess correctly            end        end                            end        monteHitRate=mean(simHitRate)    monteFARate=mean(simFARate)    monteCapacity=simTargets*(monteHitRate-monteFARate)/(1-monteFARate)end